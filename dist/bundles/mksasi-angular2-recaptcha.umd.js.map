{"version":3,"file":"mksasi-angular2-recaptcha.umd.js","sources":["../../lib/captcha.service.ts","../../lib/captcha.component.ts","../../angular2-recaptcha.ts","../../mksasi-angular2-recaptcha.ts"],"sourcesContent":["import { Injectable, NgZone, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/*\n * Common service shared by all reCaptcha component instances\n * through dependency injection.\n * This service has the task of loading the reCaptcha API once for all.\n * Only the first instance of the component creates the service, subsequent\n * components will use the existing instance.\n *\n * As the language is passed to the <script>, the first component\n * determines the language of all subsequent components. This is a limitation\n * of the present Google API.\n */\n@Injectable()\nexport class ReCaptchaService {\n\n    private scriptLoaded = false;\n    private readySubject: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n    constructor(zone: NgZone) {\n        /* the callback needs to exist before the API is loaded */\n\t\tif (typeof window != 'undefined') {\n\t\t\twindow[<any>\"reCaptchaOnloadCallback\"] = <any>(() => zone.runOutsideAngular(this.onloadCallback.bind(this)));\n\t\t}\n    }\n\n    public getReady(language: string, global: boolean): Observable<boolean> {\n        if (!this.scriptLoaded) {\n            const scriptUrl = !!global ? 'www.recaptcha.net' : 'www.google.com';\n            this.scriptLoaded = true;\n            let doc = <HTMLDivElement>document.body;\n            let script = document.createElement('script');\n            script.innerHTML = '';\n            script.src = `https://${scriptUrl}/recaptcha/api.js?onload=reCaptchaOnloadCallback&render=explicit` +\n                (language ? '&hl=' + language : '');\n            script.async = true;\n            script.defer = true;\n            doc.appendChild(script);\n        }\n        return this.readySubject.asObservable();\n    }\n\n    private onloadCallback() {\n        this.readySubject.next(true);\n    }\n}\n\n/* singleton pattern taken from https://github.com/angular/angular/issues/13854 */\nexport function RECAPTCHA_SERVICE_PROVIDER_FACTORY(ngZone: NgZone, parentDispatcher: ReCaptchaService) {\n    return parentDispatcher || new ReCaptchaService(ngZone);\n}\n\nexport const RECAPTCHA_SERVICE_PROVIDER = {\n    provide: ReCaptchaService,\n    deps: [NgZone, [new Optional(), new SkipSelf(), ReCaptchaService]],\n    useFactory: RECAPTCHA_SERVICE_PROVIDER_FACTORY\n};\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    EventEmitter,\n    NgZone,\n    ViewChild, ElementRef, forwardRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { ReCaptchaService } from './captcha.service';\n\n@Component({\n    selector: 're-captcha',\n    template: '<div #target></div>',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ReCaptchaComponent),\n            multi: true\n        }\n    ]\n})\nexport class ReCaptchaComponent implements OnInit, ControlValueAccessor {\n\n    @Input() site_key: string = null;\n    @Input() theme = 'light';\n    @Input() type = 'image';\n    @Input() size = 'normal';\n    @Input() tabindex = 0;\n    @Input() badge = 'bottomright';\n    /* Available languages: https://developers.google.com/recaptcha/docs/language */\n    @Input() language: string = null;\n    @Input() global: boolean = false;\n\n    @Output() captchaResponse = new EventEmitter<string>();\n    @Output() captchaExpired = new EventEmitter();\n    @Output() loaded = new EventEmitter<boolean>();\n\n    @ViewChild('target') targetRef: ElementRef;\n    widgetId: any = null;\n\n    onChange: Function = () => {};\n    onTouched: Function = () => {};\n\n    constructor(\n        private _zone: NgZone,\n        private _captchaService: ReCaptchaService\n    ) {\n    }\n\n    ngOnInit() {\n        this._captchaService.getReady(this.language, this.global)\n            .subscribe((ready) => {\n                if (!ready)\n                    return;\n                // noinspection TypeScriptUnresolvedVariable,TypeScriptUnresolvedFunction\n                this.widgetId = (<any>window).grecaptcha.render(this.targetRef.nativeElement, {\n                    'sitekey': this.site_key,\n                    'badge': this.badge,\n                    'theme': this.theme,\n                    'type': this.type,\n                    'size': this.size,\n                    'tabindex': this.tabindex,\n                    'callback': <any>((response: any) => this._zone.run(this.recaptchaCallback.bind(this, response))),\n                    'expired-callback': <any>(() => this._zone.run(this.recaptchaExpiredCallback.bind(this)))\n                });\n                setTimeout(() => {\n                    this.loaded.emit(true);                \n                }, 0);\n            });\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    public reset() {\n        if (this.widgetId === null)\n            return;\n        // noinspection TypeScriptUnresolvedVariable\n        this._zone.runOutsideAngular((<any>window).grecaptcha.reset.bind(this.widgetId));\n        this.onChange(null);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    public execute() {\n        if (this.widgetId === null)\n            return;\n        // noinspection TypeScriptUnresolvedVariable\n        (<any>window).grecaptcha.execute(this.widgetId);\n    }\n\n    public getResponse(): string {\n        if (this.widgetId === null)\n            return null;\n        // noinspection TypeScriptUnresolvedVariable\n        return (<any>window).grecaptcha.getResponse(this.widgetId);\n    }\n\n    writeValue(newValue: any): void {\n        /* ignore it */\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    private recaptchaCallback(response: string) {\n        this.onChange(response);\n        this.onTouched();\n        this.captchaResponse.emit(response);\n    }\n\n    private recaptchaExpiredCallback() {\n        this.onChange(null);\n        this.onTouched();\n        this.captchaExpired.emit();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { ReCaptchaComponent } from \"./lib/captcha.component\";\nimport { RECAPTCHA_SERVICE_PROVIDER } from \"./lib/captcha.service\";\n\n@NgModule({\n    declarations: [ReCaptchaComponent],\n    exports: [ReCaptchaComponent],\n    providers: [RECAPTCHA_SERVICE_PROVIDER]\n})\nexport class ReCaptchaModule {}\n\nexport * from './lib/captcha.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './angular2-recaptcha';\n\nexport {RECAPTCHA_SERVICE_PROVIDER as ɵc,RECAPTCHA_SERVICE_PROVIDER_FACTORY as ɵb,ReCaptchaService as ɵa} from './lib/captcha.service';"],"names":["BehaviorSubject","Injectable","NgZone","Optional","SkipSelf","EventEmitter","Component","NG_VALUE_ACCESSOR","forwardRef","Input","Output","ViewChild","NgModule"],"mappings":"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"}