{"version":3,"sources":["../../lib/captcha.service.ts","../../lib/captcha.component.ts","../../angular2-recaptcha.ts"],"names":["ReCaptchaService","zone","_this","this","scriptLoaded","readySubject","BehaviorSubject","window","runOutsideAngular","onloadCallback","bind","prototype","getReady","language","global","scriptUrl","doc","document","body","script","createElement","innerHTML","src","async","defer","appendChild","asObservable","next","RECAPTCHA_SERVICE_PROVIDER_FACTORY","ngZone","parentDispatcher","Injectable","NgZone","RECAPTCHA_SERVICE_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","ReCaptchaComponent","_zone","_captchaService","site_key","theme","type","size","tabindex","badge","captchaResponse","EventEmitter","captchaExpired","loaded","widgetId","onChange","onTouched","ngOnInit","subscribe","ready","grecaptcha","render","targetRef","nativeElement","sitekey","callback","response","run","recaptchaCallback","expired-callback","recaptchaExpiredCallback","setTimeout","emit","reset","execute","getResponse","writeValue","newValue","registerOnChange","fn","registerOnTouched","Component","args","selector","template","providers","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Input","Output","ViewChild","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, NgZone, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/*\n * Common service shared by all reCaptcha component instances\n * through dependency injection.\n * This service has the task of loading the reCaptcha API once for all.\n * Only the first instance of the component creates the service, subsequent\n * components will use the existing instance.\n *\n * As the language is passed to the <script>, the first component\n * determines the language of all subsequent components. This is a limitation\n * of the present Google API.\n */\n@Injectable()\nexport class ReCaptchaService {\n\n    private scriptLoaded = false;\n    private readySubject: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n    constructor(zone: NgZone) {\n        /* the callback needs to exist before the API is loaded */\n\t\tif (typeof window != 'undefined') {\n\t\t\twindow[<any>\"reCaptchaOnloadCallback\"] = <any>(() => zone.runOutsideAngular(this.onloadCallback.bind(this)));\n\t\t}\n    }\n\n    public getReady(language: string, global: boolean): Observable<boolean> {\n        if (!this.scriptLoaded) {\n            const scriptUrl = !!global ? 'www.recaptcha.net' : 'www.google.com';\n            this.scriptLoaded = true;\n            let doc = <HTMLDivElement>document.body;\n            let script = document.createElement('script');\n            script.innerHTML = '';\n            script.src = `https://${scriptUrl}/recaptcha/api.js?onload=reCaptchaOnloadCallback&render=explicit` +\n                (language ? '&hl=' + language : '');\n            script.async = true;\n            script.defer = true;\n            doc.appendChild(script);\n        }\n        return this.readySubject.asObservable();\n    }\n\n    private onloadCallback() {\n        this.readySubject.next(true);\n    }\n}\n\n/* singleton pattern taken from https://github.com/angular/angular/issues/13854 */\nexport function RECAPTCHA_SERVICE_PROVIDER_FACTORY(ngZone: NgZone, parentDispatcher: ReCaptchaService) {\n    return parentDispatcher || new ReCaptchaService(ngZone);\n}\n\nexport const RECAPTCHA_SERVICE_PROVIDER = {\n    provide: ReCaptchaService,\n    deps: [NgZone, [new Optional(), new SkipSelf(), ReCaptchaService]],\n    useFactory: RECAPTCHA_SERVICE_PROVIDER_FACTORY\n};\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    EventEmitter,\n    NgZone,\n    ViewChild, ElementRef, forwardRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { ReCaptchaService } from './captcha.service';\n\n@Component({\n    selector: 're-captcha',\n    template: '<div #target></div>',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => ReCaptchaComponent),\n            multi: true\n        }\n    ]\n})\nexport class ReCaptchaComponent implements OnInit, ControlValueAccessor {\n\n    @Input() site_key: string = null;\n    @Input() theme = 'light';\n    @Input() type = 'image';\n    @Input() size = 'normal';\n    @Input() tabindex = 0;\n    @Input() badge = 'bottomright';\n    /* Available languages: https://developers.google.com/recaptcha/docs/language */\n    @Input() language: string = null;\n    @Input() global: boolean = false;\n\n    @Output() captchaResponse = new EventEmitter<string>();\n    @Output() captchaExpired = new EventEmitter();\n    @Output() loaded = new EventEmitter<boolean>();\n\n    @ViewChild('target') targetRef: ElementRef;\n    widgetId: any = null;\n\n    onChange: Function = () => {};\n    onTouched: Function = () => {};\n\n    constructor(\n        private _zone: NgZone,\n        private _captchaService: ReCaptchaService\n    ) {\n    }\n\n    ngOnInit() {\n        this._captchaService.getReady(this.language, this.global)\n            .subscribe((ready) => {\n                if (!ready)\n                    return;\n                // noinspection TypeScriptUnresolvedVariable,TypeScriptUnresolvedFunction\n                this.widgetId = (<any>window).grecaptcha.render(this.targetRef.nativeElement, {\n                    'sitekey': this.site_key,\n                    'badge': this.badge,\n                    'theme': this.theme,\n                    'type': this.type,\n                    'size': this.size,\n                    'tabindex': this.tabindex,\n                    'callback': <any>((response: any) => this._zone.run(this.recaptchaCallback.bind(this, response))),\n                    'expired-callback': <any>(() => this._zone.run(this.recaptchaExpiredCallback.bind(this)))\n                });\n                setTimeout(() => {\n                    this.loaded.emit(true);                \n                }, 0);\n            });\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    public reset() {\n        if (this.widgetId === null)\n            return;\n        // noinspection TypeScriptUnresolvedVariable\n        this._zone.runOutsideAngular((<any>window).grecaptcha.reset.bind(this.widgetId));\n        this.onChange(null);\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    public execute() {\n        if (this.widgetId === null)\n            return;\n        // noinspection TypeScriptUnresolvedVariable\n        (<any>window).grecaptcha.execute(this.widgetId);\n    }\n\n    public getResponse(): string {\n        if (this.widgetId === null)\n            return null;\n        // noinspection TypeScriptUnresolvedVariable\n        return (<any>window).grecaptcha.getResponse(this.widgetId);\n    }\n\n    writeValue(newValue: any): void {\n        /* ignore it */\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    private recaptchaCallback(response: string) {\n        this.onChange(response);\n        this.onTouched();\n        this.captchaResponse.emit(response);\n    }\n\n    private recaptchaExpiredCallback() {\n        this.onChange(null);\n        this.onTouched();\n        this.captchaExpired.emit();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { ReCaptchaComponent } from \"./lib/captcha.component\";\nimport { RECAPTCHA_SERVICE_PROVIDER } from \"./lib/captcha.service\";\n\n@NgModule({\n    declarations: [ReCaptchaComponent],\n    exports: [ReCaptchaComponent],\n    providers: [RECAPTCHA_SERVICE_PROVIDER]\n})\nexport class ReCaptchaModule {}\n\nexport * from './lib/captcha.component';\n"]}